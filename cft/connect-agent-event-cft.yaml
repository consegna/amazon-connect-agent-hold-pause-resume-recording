AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Blog - Stop recording when Agent puts customer on hold using Agent Event Stream'
Parameters:
  StreamARN:
    Type: String
    Description: Kinesis data stream ARN
    AllowedPattern: '^arn:aws:kinesis:[a-z0-9-]+:[0-9]{12}:stream\/[a-zA-Z0-9_.-]+$'
    ConstraintDescription: 'Must be a valid Kinesis Stream ARN.'
  SolutionSourceBucket:
    Type: String
    Description: Source Bucket Name
  InstanceARN:
    Type: String
    Description: InstanceARN
    AllowedPattern: '^arn:aws:connect:[a-z0-9-]+:[0-9]{12}:instance\/[a-f0-9-]+$'
    ConstraintDescription: 'Must be a valid Connect Instance ARN.'
  KMSKeyARN:
    Type: String
    Description: KMS Key ARN
    Default: ''
    AllowedPattern: '^$|^arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key\/[a-f0-9-]+$'
    ConstraintDescription: 'Must be a valid KMS Key ARN.'

#######################
# Globals
#######################
Globals:
  Function:
    Runtime: nodejs22.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 600
    Environment:
      Variables:
        HoldEventLogTable: !Ref HoldEventLogTable
        InstanceARN: !Ref InstanceARN

Conditions:
  HasKMSKeyARN: !Not [!Equals [!Ref KMSKeyARN, ""]]

#######################
# RESOURCES
#######################
Resources:

#######################
# Lambda IAM Role
#######################
  AgentEventLambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName : !Sub '${AWS::StackName}-${AWS::Region}-Role'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: kinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:ListStreams'
                  - 'kinesis:DescribeStreamSummary'
                  - 'kinesis:ListShards'
                  - 'kinesis:DescribeStreamConsumer'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:DescribeStream'
                  - 'kinesis:ListStreamConsumers'
                Resource: 
                  - !Ref StreamARN
        - PolicyName: dynamodb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${HoldEventLogTable}'
        - PolicyName: connect
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'connect:StartContactRecording'
                  - 'connect:StopContactRecording'
                  - 'connect:ResumeContactRecording'
                  - 'connect:SuspendContactRecording'
                Resource:
                  - !Sub '${InstanceARN}/contact/*'
      Path: /
  
  KMSKeyLambdaDecryptPolicy:
    Type: AWS::IAM::Policy
    Condition: HasKMSKeyARN
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::AccountId}-KMSKeyLambdaDecryptPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource: 
              - !Ref KMSKeyARN 
      Roles:
        - !Ref AgentEventLambdaIamRole 

#######################
# Lambda Permission
#######################
  PermissionForKinesisToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "AgentEventLambda"
      Action: "lambda:InvokeFunction"
      Principal: "kinesis.amazonaws.com"
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref StreamARN

#######################
# Lambda Function
#######################
  AgentEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-AgentEventLambda'
      Handler: index.handler
      CodeUri: 
        Bucket: !Ref SolutionSourceBucket
        Key: connect-agent-hold-stop-recording.zip
      Description: Pause Recording when Agent puts customer on hold using Agent Event Stream
      Role: !GetAtt AgentEventLambdaIamRole.Arn
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !Ref StreamARN
            BatchSize: 1
            StartingPosition: LATEST

#######################
# Dynamodb Table 
#######################
  HoldEventLogTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: eventId
          AttributeType: S
      KeySchema: 
        - AttributeName: eventId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: HoldEventLogTable
